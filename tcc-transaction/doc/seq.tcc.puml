@startuml
'https://plantuml.com/sequence-diagram
participant User
participant ROOT

participant CompensableTransactionInterceptor as COMP_IPTR_ROOT
participant ResourceCoordinatorInterceptor as RC_ITPR_ROOT
participant TransactionManager as TrxManager_Root
participant BRANCH_1_FEIGN_PROXY
participant CompensableTransactionInterceptor_BRANCH as COMP_IPTR_BRANCH
participant ResourceCoordinatorInterceptor_BRANCH as RC_ITPR_BRANCH
participant TransactionManager_BRANCH as TrxManager_BRANCH
participant BRANCH_1_SERVICE

User -> ROOT: 发起业务请求

== TRYING ==
' 1 调用 ROOT
' 1.1 TccCompensableAspect BEFORE -- rootMethodProceed
ROOT -> COMP_IPTR_ROOT: rootMethodProceed()
COMP_IPTR_ROOT -> TrxManager_Root: begin Transaction
COMP_IPTR_ROOT <-- TrxManager_Root: RootTransaction created

' 1.2 TccTransactionContextAspect BEFORE -- generateAndEnlistRootParticipant
COMP_IPTR_ROOT -> RC_ITPR_ROOT: generateAndEnlistRootParticipant()
RC_ITPR_ROOT -> RC_ITPR_ROOT: build confirmInvocation & cancelInvocation
RC_ITPR_ROOT -> RC_ITPR_ROOT: build RootParticipant with xid and Terminator
RC_ITPR_ROOT -> TrxManager_Root: enlist RootParticipant
RC_ITPR_ROOT <-- TrxManager_Root: RootParticipant enlisted
RC_ITPR_ROOT --> COMP_IPTR_ROOT: pjp.proceed()

' 2 ROOT 调用 BRANCH TRANSACTION
' 2.1 首先 TccTransactionContextAspect BEFORE
COMP_IPTR_ROOT -> RC_ITPR_ROOT: generateAndEnlistConsumerParticipant()
RC_ITPR_ROOT -> RC_ITPR_ROOT: build TransactionContext with Xid and TransactionStatus
RC_ITPR_ROOT -> RC_ITPR_ROOT: build confirmInvocation & cancelInvocation
RC_ITPR_ROOT -> RC_ITPR_ROOT: build BranchParticipant with xid and Terminator
RC_ITPR_ROOT -> TrxManager_Root: enlist BranchParticipant
RC_ITPR_ROOT <-- TrxManager_Root: BranchParticipant enlisted
RC_ITPR_ROOT --> COMP_IPTR_ROOT: pjp.proceed()

' 2.2 调用 FeignProxy
COMP_IPTR_ROOT -> BRANCH_1_FEIGN_PROXY: invoke with TransactionContext and other args

' 3 调用 BRANCH
' 3.1 TccCompensableAspect BEFORE -- providerMethodProceed TRYING
BRANCH_1_FEIGN_PROXY -> COMP_IPTR_BRANCH: providerMethodProceed() TRYING
COMP_IPTR_BRANCH -> TrxManager_BRANCH: propagationNewBegin()
COMP_IPTR_BRANCH <-- TrxManager_BRANCH: BranchTransaction created

' 3.2 TccTransactionContextAspect BEFORE -- generateAndEnlistProviderParticipant
COMP_IPTR_BRANCH -> RC_ITPR_BRANCH: generateAndEnlistProviderParticipant()
RC_ITPR_BRANCH -> RC_ITPR_BRANCH: build confirmInvocation & cancelInvocation
' todo 这里的 Participant
RC_ITPR_BRANCH -> RC_ITPR_BRANCH: build Participant with xid and Terminator
RC_ITPR_BRANCH -> TrxManager_BRANCH: enlist Participant
RC_ITPR_BRANCH <-- TrxManager_BRANCH: Participant enlisted
RC_ITPR_BRANCH --> COMP_IPTR_BRANCH: pjp.proceed()

' 3.3 执行 BRANCH Service 的业务逻辑
COMP_IPTR_BRANCH -> BRANCH_1_SERVICE: invoke trying with TransactionContext and other args
COMP_IPTR_BRANCH <-- BRANCH_1_SERVICE: return
COMP_IPTR_BRANCH --> BRANCH_1_FEIGN_PROXY: return


== CONFIRMING ==
' ROOT 和 BRANCH 都成功执行，执行 CONFIRMING 逻辑
BRANCH_1_FEIGN_PROXY --> COMP_IPTR_ROOT: SUCCESS
COMP_IPTR_ROOT -> TrxManager_Root: commit Transaction
TrxManager_Root -> TrxManager_Root: change TransactionStatus to CONFIRMING
TrxManager_Root -> TrxManager_Root: get Participants and invoke their confirmInvocation

' invoke BRANCH_1_FEIGN_PROXY
TrxManager_Root -> RC_ITPR_ROOT: interceptTransactionContextMethod()
' 此时 TransactionContext != null，此时 MethodType 为 NORMAL ！！！
TrxManager_Root <-- RC_ITPR_ROOT: pjp.proceed()
TrxManager_Root -> BRANCH_1_FEIGN_PROXY: invoke with TransactionContext and other args

' TccCompensableAspect BEFORE -- providerMethodProceed CONFIRMING
BRANCH_1_FEIGN_PROXY -> COMP_IPTR_BRANCH: providerMethodProceed() CONFIRMING
COMP_IPTR_BRANCH -> TrxManager_BRANCH: propagationExistBegin()
TrxManager_BRANCH -> TrxManager_BRANCH: change TransactionStatus to CONFIRMING
TrxManager_BRANCH --> COMP_IPTR_BRANCH:
COMP_IPTR_BRANCH -> TrxManager_BRANCH: commit Transaction
' 这里只有一个 Participant，就是 BranchTransaction 自己
TrxManager_BRANCH -> TrxManager_BRANCH: get participants and invoke their confirmInvocation
TrxManager_BRANCH -> BRANCH_1_SERVICE: invoke confirming with TransactionContext and other args
TrxManager_BRANCH <-- BRANCH_1_SERVICE: return
TrxManager_BRANCH --> COMP_IPTR_BRANCH: return
COMP_IPTR_BRANCH -> TrxManager_BRANCH: delete BranchTransaction
COMP_IPTR_BRANCH <-- TrxManager_BRANCH: BranchTransaction deleted
COMP_IPTR_BRANCH --> BRANCH_1_FEIGN_PROXY: return

BRANCH_1_FEIGN_PROXY --> TrxManager_Root: return
TrxManager_Root --> COMP_IPTR_ROOT: return
COMP_IPTR_ROOT -> TrxManager_Root: delete RootTransaction
COMP_IPTR_ROOT <-- TrxManager_Root: RootTransaction deleted
COMP_IPTR_ROOT --> ROOT: done
ROOT --> User: done

== CANCELLING ==

@enduml